//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: B5HodoscopeSD.cc 76474 2013-11-11 10:36:34Z gcosmo $
//
/// \file B5HodoscopeSD.cc
/// \brief Implementation of the B5HodoscopeSD class

#include "B5HodoscopeSD.hh"
#include "B5HodoscopeHit.hh"

#include "G4MuonPlus.hh"
#include "G4MuonMinus.hh"
#include "G4Neutron.hh"
#include "G4Gamma.hh"
#include "G4HCofThisEvent.hh"
#include "G4TouchableHistory.hh"
#include "G4Track.hh"
#include "G4Step.hh"
#include "G4SDManager.hh"
#include "G4SystemOfUnits.hh"
#include "G4ios.hh"
#include "Randomize.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B5HodoscopeSD::B5HodoscopeSD(G4String name)
: G4VSensitiveDetector(name), fHitsCollection(0), fHCID(-1)
{
    G4String HCname = "hodoscopeColl";
    collectionName.insert(HCname);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B5HodoscopeSD::~B5HodoscopeSD()
{}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void B5HodoscopeSD::Initialize(G4HCofThisEvent* hce)
{
    fHitsCollection = new B5HodoscopeHitsCollection
    (SensitiveDetectorName,collectionName[0]);
    if (fHCID<0)
    { fHCID = G4SDManager::GetSDMpointer()->GetCollectionID(fHitsCollection); }
    hce->AddHitsCollection(fHCID,fHitsCollection);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4bool B5HodoscopeSD::ProcessHits(G4Step* step, G4TouchableHistory*)
{
    G4double edep = step->GetTotalEnergyDeposit();
    if (edep==0.) return true;

    // Only want to increment the rest if it is a primary muon (parentID==0)
    G4Track* track = step->GetTrack();
    G4int parentID = track->GetParentID();
    //    G4cout << "parentID " << parentID << G4endl;

    G4bool muon_flag=false;
    G4bool neutron_flag=false;
    G4bool gamma_flag=false;

    if (track->GetDefinition() == G4MuonPlus::Definition()) muon_flag=true; // muon 
    if (track->GetDefinition() == G4MuonMinus::Definition()) muon_flag=true; // muon 
    if (track->GetDefinition() == G4Neutron::Definition()) neutron_flag=true; // muon 
    if (track->GetDefinition() == G4Gamma::Definition()) gamma_flag=true; // muon 
  	
//     if(!muon_flag){

      //    G4cout << "...incrementing " << G4endl;
    
    G4StepPoint* preStepPoint = step->GetPreStepPoint();

    G4TouchableHistory* touchable = (G4TouchableHistory*)(preStepPoint->GetTouchable());
    G4int copyNo = touchable->GetVolume()->GetCopyNo();
    G4double hitTime = preStepPoint->GetGlobalTime();
    
    // check if this finger already has a hit
    G4int ix = -1;
    for (G4int i=0;i<fHitsCollection->entries();i++)
    {
        if ((*fHitsCollection)[i]->GetID()==copyNo)
        {
            ix = i;
            break;
        }
    }

    if (ix>=0)
        // if it has, then take the earlier time
    {
        if ((*fHitsCollection)[ix]->GetTime()>hitTime)
        { 
		(*fHitsCollection)[ix]->SetTime(hitTime); 
		(*fHitsCollection)[ix]->SetEdep(edep);    
	}

    }
    else
        // if not, create a new hit and set it to the collection
    {
        B5HodoscopeHit* hit = new B5HodoscopeHit(copyNo,hitTime);

        G4VPhysicalVolume* physical = touchable->GetVolume();
        hit->SetLogV(physical->GetLogicalVolume());
        G4AffineTransform transform  = touchable->GetHistory()->GetTopTransform();
        transform.Invert();

        hit->SetRot(transform.NetRotation());
        hit->SetPos(transform.NetTranslation());
        hit->SetEdep(edep);    
        hit->SetTime(hitTime);    
	// hit->Print();
	// if(muon_flag) hit->SetType(0);    
	// if(neutron_flag) hit->SetType(1);    
	// if(gamma_flag) hit->SetType(2);    
	// G4double e = G4UniformRand();
	// if(e<0.4) 
	fHitsCollection->insert(hit);
    
    }
    
   // }// End if parentID==0

    return true;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
